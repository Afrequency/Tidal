# Tidal 
# Domain specific language for Pattern 

Tidal is a language for live coding pattern. It is embedded in the
Haskell language -- you don't really have to learn Haskell to use
Tidal, but it might help to pick up an introduction first. You could
try Graham Hutton's "Programming in Haskell" or Miran Lipovaƒça's
"Learn you a Haskell for Great Good" (which has a free online
version). Or, you could just try learning enough just by playing around
with Tidal.

Tidal does not include a synthesiser, but instead communicates with an
external synthesiser using the Open Sound Control protocol. It has
been developed for use with a particular synthesiser called
"dirt".

Currently about the only interface to Tidal is the emacs editor. To
install it you'll need to put two lines into your .emacs file like this:

(add-to-list 'load-path "~/projects/tidal")
(require 'tidal)




If you are using emacs integration (i.e. tidal.el) then when y

~~~~ {#mycode .haskell}
  d1 <- dirtstream "dirt1"
  d2 <- dirtstream "dirt1"
  // ...
  d9 <- dirtstream "dirt1"
~~~~

d1,d2,d3 .. d9 = different connections to the synthesiser

# this plays a bass drum every loop
d1 $ sound "bd"

# To run single-line patterns like the above, you can do ctrl-c twice (ctrl-c, ctrl-c)
 
# The dollar separates a function from its parameter, you could also write it like this:

d1 (sound "bd")

# You specify a simple sequence by quoting it "bd sn" gives you a pattern of bass drum then snare.

d1 $ sound "bd sn"

# The "sound" function in the above is a parameter to the synth.

# When specifying a sequence you can group together several sounds to play 

d1 $ sound "[bd sn sn] sn"

# In the above the subsequence bd sn sn plays in the time it would otherwise take to play a single sound. You can do this to any level of depth:

d1 $ sound "bd bd [bd [sn [sn sn] sn] sn]" 

# The sounds are actually groups of samples, you can pick a different bass drum by adding a slash and a number

d1 $ sound "bd/4" # plays the fifth bassdrum sample (it starts with 0)

# The samples can be found in Dropbox/bcn/dirt/samples/

Here's a list of the ones I've collected:
20010320-Samples  breaks165  fixed        made2       sheffield
20020506          breath     flick        mash        short
808               bubble     foo          mash2       sid
909               can        fuckable     metal       sine
ab                casio      future       miniyeah    sitar
ade               cc         gabba        moan        sn
ades2             chin       gabbaloud    monsterb    space
ades3             chink      gabbalouder  moog        speech
ades4             circus     glasstap     mouth       speechless
alex              clak       glitch       mp3         speedupdown
amencutup         click      glitch2      msg         stab
armora            co         gretsch      mt          stomp
arp               cosmicg    h            mute        subroc3d
baa               cp         hand         new         sugar
baa2              cr         hardcore     newnotes    sundance
bass              crow       hc           noise       tabla
bass0                     hh           noise2      tabla2
bass1             d          hh27         notes       tablex
bass2             db         hmm          oc          tacscan
bass3             diphone    ho           odx         tech
bassdm            diphone2   house        off         techno
bassfoo           dist       ht           pebbles     tink
battles           dork2      incoming     perc        tok
bd                dorkbot    industrial   pluck       trump
bend              dr         insect       print       uxay
bev               dr2        invaders     printshort  v
bin               dr55       jazz         proc        voodoo
birds3            dr_few     jungle       procshort   wind
blip              drum       jvbass       psr         wobble
blue              drumtraks  koy          rave        world
bottle            e          kurt         ravemono    xmas
breaks125         electro1   latibro      rm          yeah
breaks152         erk        led          sax
breaks152loud     f          lighter      seawolf
breaks152louder   fest       lt           sequential
breaks157         fire       made         sf

# We can apply functions to patterns like "rev" for reverse:

d1 $ rev $ sound "bd sn/2 sn/2"

# And apply that rev function only every 4th repetition:

d1 $ every 4 rev $ sound "bd sn/2 sn/2"

# Also try with density and slow

d1 $ every 4 (density 4) $ sound "bd sn/2 sn/2"
d1 $ every 4 (slow 2) $ sound "bd sn/2 sn/2"

# n <~ is for "rotating" patterns, e.g. 0.5 <~ rotates half a loop to the left

d1 $ every 4 (0.25 <~) $ sound "[[bd ~ bd] [~ sn/2] [bd bd] sn/2, [hc/2]*3]"

# We can use these techniques together and it starts sounding interesting

d1 $ every 3 rev $ every 4 (0.25 <~) $ sound "[[[bd bd] jvbass/2 bd] [bass sn] [bd bd] ht, [jvbass/2 jvbass/5]*3]"

# Then add another layer a bit different

d2 $ every 4 rev $ every 2 (0.5 <~) $ sound "[[[bd bd] jvbass/2 bd] [bass sn] [bd bd] ht, [jvbass/2 jvbass/5]*3]"

# "sound" for picking the sample is only one parameter, you can join together more parameters with |+|, and give each one its own pattern4
8
d1 $ (density 8 $ sound "[bd sn, jazz/7]*1/3")
  |+| vowel "a e i o u"
  |+| shape "0.8"
  |+| speed "2 0.5"

# vowel applies a formant filter, shape adds "wave shaping" distortion (don't go above 0.9999!) and speed changes the playback speed and therefore pitch

# To run multi-line patterns like the above, you do ctrl-c ctrl-e
# You have to make sure that there is an empty, blank line around the pattern, otherwise it will not work

# If there is some problem with your code, the old version will carry on playing, and you will hopefully see an error message in the frame below. The error message will probably not be very useful, sorry.

# You can also use continuous functions as patterns, for example:
    
d1 $ (density 8 $ sound "[bd sn, jazz/7]*1/3")
  |+| vowel "a e i o u"
  |+| shape (slow 4 $ sinewave1)
  |+| speed "2 0.5"

d1 $ (density 8 $ sound "[bd sn, jazz/7]*1/3")

# We better say how to make things stop. To make everything quiet you do this:
    
    hush

# To make individual things stop you can use the empty pattern called "silence"

d1 silence

# If you ran the above with both d1 and d2 running, d1 would go silent and d2 would carry on playing

# Here's a complicated example which shows use of the "pick" function. It picks samples from a sample folder in the same way that adding /3 or whatever to sample names does

d1 $ sound (pick 
            <$> "[amencutup]*12"
            <*> (slow 3 $ every 2 rev (run 12)))

# The <$> and <*> are a bit strange but we will go into them more later.

# The "striate" function is a lot of fun. It chops a pattern into a lot of bits. The below chops a long sample of beverly craven into 128 little bits. If you change the number 4 to something else you can do time stretching.

d2 $ slow 4 $ striate 128 $ sound "bev"

# If you then add more functions you can do strange things with the chopped up bits of samples

d2 $ every 2 rev $ slow 8 $ striate 128 $ sound "bev"
n
d2 $ every 3 (0.25 <~) $ every 2 rev $ slow 8 $ striate 128 $ sound "bev"

d2 $ (every 3 (0.25 <~) $ every 2 rev $ slow 4 $ striate 128 $ sound "sax")
  |+| speed ((+0.5) <$> sinewave1)
  |+| vowel "a e"

d2 $ every 3 (0.25 <~) $ every 2 rev $ slow 4 $ striate 128 $ sound "pebbles"

d4 $ sound "[[gabba industrial] [sn/2]*3] [jvbass jvbass/2]*4"

# The "brak" function plays a loop once normally, then again twice as fast and offset, so any patterns sound like a break

d1 $ brak $ sound "bd sn/2 [bd bd bd] sn"

# The "stack" functions let you play several patterns simulataneously
d1 $ stack [density 2 $ brak $ sound "[bd sn/2 bd sn/3]",
            sound "[hh]*8"
           ]

